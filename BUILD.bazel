load("@aspect_bazel_lib//lib:testing.bzl", "assert_archive_contains")
load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@rules_go//go:def.bzl", "go_binary")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_load")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

# Build the Go binary
go_binary(
    name = "app",
    srcs = ["main.go"],
    importpath = "github.com/yours/mcp-google-calendar",
    visibility = ["//visibility:public"],
    deps = [
        "@com_github_mark3labs_mcp_go//mcp",
        "@com_github_mark3labs_mcp_go//server",
        "@org_golang_x_oauth2//:go_default_library",
        "@org_golang_x_oauth2//google:go_default_library",
        "@org_golang_google_api//calendar/v3:go_default_library",
        "@org_golang_google_api//option:go_default_library",
    ],
)

# Put app go_binary into a tar layer.
pkg_tar(
    name = "app_layer",
    srcs = [":app"],
    # If the binary depends on RUNFILES, uncomment the attribute below.
    # include_runfiles = True
)

# Prove that the application is at the path we expect in that tar.
assert_archive_contains(
    name = "test_app_layer",
    archive = "app_layer.tar",
    expected = ["app"],
)

oci_image(
    name = "image",
    # This is defined by an oci.pull() call in /MODULE.bazel
    base = "@distroless_base",
    entrypoint = ["/app"],
    # Link the resulting image back to the repository where the build is defined.
    labels = {
        "org.opencontainers.image.source": "https://github.com/aspect-build/bazel-examples",
    },
    tars = [":app_layer"],
    env = {
        "HOST": "0.0.0.0",
        "PORT": "5555",
    },
    exposed_ports = [
        "5555/tcp",
    ],
)

# This is the target that should be released to the target platform
platform_transition_filegroup(
    name = "transitioned_image",
    srcs = [":image"],
    target_platform = select({
        "@platforms//cpu:arm64": "@rules_go//go/toolchain:linux_arm64",
        "@platforms//cpu:x86_64": "@rules_go//go/toolchain:linux_amd64",
    }),
)

# $ bazel run //oci_go_image:load
# $ docker run --rm gcr.io/example:latest
#   string(
# -       "Hello World",
# +       "Hello Go",
#   )
oci_load(
    name = "build_image",
    # Use the image built for the target platform
    image = ":transitioned_image",
    repo_tags = ["gcr.io/mcp-google-calendar:latest"],
)
